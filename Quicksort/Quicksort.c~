#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <math.h>

void quickSort(int *toSort, int beg, int end);
static unsigned long getNanos(void);

int compare_ints (const void *a, const void *b)
{
  const int *da = (const int *) a;
  const int *db = (const int *) b;

  return (*da > *db) - (*da < *db);
}

int main(void)
{
  time_t t1,t2;
  int elapsedTime;
  int arraySize = 100000;
  int toSort[arraySize];
  int tempSort[arraySize];
  srand((unsigned int)arraySize);
  unsigned long start,end;

  for(int i = 0; i < 1; i++)
    {
      for(int j = 0; j < arraySize; j++)
	{
	  toSort[j] = rand() % (arraySize * 10);
	  tempSort[j] = toSort[j];
	}

      start = getNanos();
      quickSort(toSort, 0,arraySize - 1);
      end = getNanos();

      fprintf(stdout, "Sorting took %ld\n", (end-start));
      qsort (tempSort, arraySize, sizeof (int), compare_ints);
      for(int i = 0; i < arraySize; i++)
	{
	  if(tempSort[i] != toSort[i])
	    printf("Error is: %d should be: %d\n",tempSort[i], toSort[i]);
	}
      
    }
  return 1;
}

int getPivot(int *toSort, int beg, int end)
{
  int pivot;
  
  //The array is size 2, pivot doesn't matter
  if((end - beg) == 1)
    return toSort[beg];

  //size 3 or greater
  if((end-beg) >= 2)
    {
      int median = (int) floor((end-beg)/2);
      int check[3] = {toSort[beg], toSort[end], toSort[median]};
      //Finding the median without sorting...
      if((check[0] <= check[1]) && (check[0] <= check[2]))
	{
	  if(check[1] < check[2])
	    return check[1];
	  return check[2];
	}
      if((check[1] <= check[0]) && (check[1] <= check[2]))
	{
	  if(check[0] < check[2])
	    return check[0];
	  return check[2];
	}
      if((check[2] <= check[1]) && (check[2] <= check[0]))
	{
	  if(check[0] < check[1])
	    return check[0];
	  return check[1];
	}
    }
  printf("Invalid bound for finding a median Beg: %d, end: %d", beg, end);
}



void quickSort(int *toSort, int beg, int end)
{
  if(end == beg)
    return;
      
  int pivot = getPivot(toSort, beg, end);
  int numSmall = 0;
  int numLarge = 0;
  int numEqual = 0;
  int smaller[end-beg];
  int larger[end-beg];
  int equal[end-beg];

  //Here we find the small, equal, and larger
  for(int i = beg; i <= end; i++)
    {
      if(toSort[i] < pivot)
	{
	  smaller[numSmall] = toSort[i];
	  numSmall++;
	}
      else if(toSort[i] > pivot)
	{
	  larger[numLarge] = toSort[i];
	  numLarge++;
	}
      else
	{
	  equal[numEqual] = pivot;
	  numEqual++;
	}
    }
  
  memcpy(&toSort[beg],&smaller, numSmall*sizeof(int));
  memcpy(&toSort[beg+numSmall], &equal, numEqual*sizeof(int));  
  memcpy(&toSort[beg+numSmall+numEqual], &larger, numLarge*sizeof(int));
  
  if(numSmall > 0)
    quickSort(toSort,beg,beg + (numSmall - 1));
  if(numLarge > 0)
    quickSort(toSort,end - (numLarge - 1),end);
}

static unsigned long getNanos(void) {
  struct timespec ts;
  timespec_get(&ts, TIME_UTC);
  return (unsigned long)ts.tv_sec * 1000000000L + ts.tv_nsec;
}  
